@page "/"

@using System.Net
@using System.Text
@using System.Text.Json


@inject HttpClient httpClient

<div class="d-flex justify-content-center mt-5">
    <header>
        <h1>Simple URL Shortener</h1>
    </header>
</div>

<div class="card">
    <div class="card-body">
        <EditForm EditContext="editContext" OnValidSubmit=@OnValidSubmit>
            <div class="form-group">
                <label for="originalURL">Original URL:</label>
                <InputText class="form-control" id="originalURL" placeholder="Enter URL" @bind-Value="link.OriginalLink"></InputText>

                <div class="mt-1">
                    <strong>
                        <ValidationMessage For="() => link.OriginalLink" />
                    </strong>
                </div>

            </div>

            <div class="form-group">
                <label for="shortenedURL">Shortened URL:</label>
                <InputText class="form-control" id="shortenedURL" @bind-Value="link.ShortenedLink" readonly></InputText>
            </div>

            <button type="submit" class="btn btn-primary">Shorten</button>
        </EditForm>

        <div class="mt-2 text-danger">
            <strong>@requestError</strong>
        </div>
    </div>
</div>

@code
{
    private Link link = new Link();
    private EditContext editContext;
    private ValidationMessageStore messageStore;

    private string requestError;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        editContext = new EditContext(link);
        editContext.OnValidationRequested += OnValidationRequested;
        messageStore = new ValidationMessageStore(editContext);
    }

    private void OnValidationRequested(object sender, ValidationRequestedEventArgs args)
    {
        messageStore.Clear();

        Console.WriteLine(link.OriginalLink);

        if (string.IsNullOrEmpty(link.OriginalLink))
            messageStore.Add(() => link.OriginalLink, "URL is requred");
        else if (!IsValidUrl(link.OriginalLink))
            messageStore.Add(() => link.OriginalLink, "Invalid URL");
    }

    private async Task OnValidSubmit()
    {
        requestError = "";

        HttpResponseMessage response = null;
        try
        {
            response = await httpClient.PostAsJsonAsync("https://localhost:5001", link);
        }
        catch (Exception ex)
        {
            requestError = $"Request Error ({ex.Message})";
            return;
        }

        if (response != null)
        {
            if (response.IsSuccessStatusCode)
            {
                Link result = await JsonSerializer.DeserializeAsync<Link>(await response.Content.ReadAsStreamAsync());
                link.ShortenedLink = result.ShortenedLink;
            }
            else
            {
                requestError = $"Request Error ({response.StatusCode})";
            }
        }
    }

    private bool IsValidUrl(string url) => Uri.IsWellFormedUriString(url, UriKind.Absolute);

    public void Dispose()
    {
        editContext.OnValidationRequested -= OnValidationRequested;
    }
}